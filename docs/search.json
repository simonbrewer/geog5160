[
  {
    "objectID": "GEOG_5160_6160_lab01.html",
    "href": "GEOG_5160_6160_lab01.html",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "",
    "text": "In this lab, we will introduce the basic functionality of R, together with some simple plotting functions. We will be using the following files for these examples:\n\nA dataset of morphological measurements of three species of penguin from the file penguins.csv\n\nMore information about this dataset can be found here: https://allisonhorst.github.io/palmerpenguins/index.html"
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#a-quick-note-on-formatting",
    "href": "GEOG_5160_6160_lab01.html#a-quick-note-on-formatting",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "A quick note on formatting",
    "text": "A quick note on formatting\nIn this and subsequent labs, code that can be entered into R will be high-lit, e.g.:\n\nplot(x, y)\n\nAnd R output will be formatted with ## at the start of the line. File names will be given in italics and will be available in the ‘Datafiles’ directory on the course Canvas site."
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#getting-started",
    "href": "GEOG_5160_6160_lab01.html#getting-started",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Getting started",
    "text": "Getting started\n\nRStudio layout\nThe R Studio interface consists of several windows. Start R Studio from the ‘Start’ menu under Windows, and the following window should appear:\n\n\n\nRStudio Interface\n\n\n\nBottom left: console window (also called command window). Here you can type simple commands after the &gt; prompt and R will then execute your command. This is the most important window, because this is where R actually does stuff.\nTop left: editor window (also called script window). Collections of commands (scripts) can be edited and saved. When you don’t see this window, you can open it with [File \\(&gt;\\) New \\(&gt;\\) R script]. Just typing a command in the editor window is not enough, it has to get into the command window before R executes the command. If you want to run a line from the script window (or the whole script), copy and paste it to the console. Alternatively, you can click [Run] or press CTRL+ENTER to send it to the command window.\nTop right: workspace / history window. In the workspace window you can see which data and values R has in its memory. You can view and edit the values by clicking on them. The history window shows what has been typed before.\nBottom right: Files / plots / packages / help window. Here you can open files, view plots (also previous plots), install and load packages or use the help function. You can change the size of the windows by dragging the grey bars between the windows.\n\n\n\nWorking with R\nMuch of your time spent with R will involve typing commands in at the console, and R Studio has some help with this.\n\nThe up/down arrow keys allow you to cycle back through commands that have been previously entered. You can then modify or reuse these as necessary. The commands can also be accessed through the `History’ tab in the top-right panel\nThe console has ‘tab-completion’, which allows you to enter the first few characters of a string or function name, press ‘Tab’, and R Studio will bring up a list of possible options that match the string you entered. Try typing pri and pressing ‘Tab’ - you should see print as part of the list, and you can click on this, or scroll down to use it from the list.\n\n\n\nWorkspace\nR has a workspace where variables and data are stored as you use it. This is held in the memory of the computer, so if you are working from a file, you will need to read it in to the R workspace, and then work on the values held in memory. This means that you only access files to read in or write out data, the rest of the time you are working on a copy in the workspace.\n\n\nWorking directory\nR defines the working directory as the folder in which it is currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or plot, it will save it in the working directory.\nFor this class, the labs will assume that you have your files organized according to the following structure:\n+-- geog6160\n|   +-- datafiles\n|   +-- lab01\n|   +-- lab02\n|   +-- lab03\n...\n|   +-- lab15\nTo do this, go to your Documents folder, and create a new folder called geog6160. In this now create two new folders, one called datafiles (where we will store all the data used across all labs and one called lab01, which we will use for today’s lab.\nOnce you have created these folders, we need to change R’s working directory so that it is pointing to lab01. The easiest way to do this is by going to the [Session] menu in RStudio, then [Change working directory]. This will open a file browser that you can use to browse through your computer and find the folder. (If you are using the base version of R, go to [File] \\(&gt;\\) [Change dir…] in Windows, or [Misc] \\(&gt;\\) [Change Working Directory] in Mac.)\nYou can also change the working directory manually using the setwd() function in the console. To do this, you may need to know the full path to the folder on your computer. If you followed the instructions given above, this should be:\n\nOn a Windows system: C:/Users/username/Documents/geog6160/lab01\nOn a Mac OSX system: /Users/username/Documents/geog6160/lab01\n\nWhere username is your name on the computer. You can also find this path by\n\nOn a Windows system: - Use the File Explorer to select the folderlab01`\n\nRight-click the folder and select ‘Properties’\nIn the pop-up window, the path will be listed under ‘Location’\nHighlight this, and copy the path\n\nOn a Mac OSX system:\n\nUse the Finder app to select the folder lab01\nGo to the “View” menu then “Show Path Bar”. THis will make the full path appear at the bottom of the Finder window\nRight-click the Path Bar file name\nSelect “Copy as Pathname” You can now run the setwd() command. Go to the console window in RStudio and enter the following code:\n\n\n\nsetwd(\"\")\n\nAnd paste your directory. The code should look something like this:\n\nsetwd(\"C:/Users/username/Documents/geog6160/lab01\")\n\nNote that the slashes are forward slashes and don’t forget the quotations. R is case sensitive, so make sure you write capitals where necessary. To check that you have correctly changed directory, enter the following command, which will show you the current working directory:\n\ngetwd()\n\nYou can also use relative paths. If your current working directory is geog6160 and you want to change to lab01, enter the following code (where the ./ changes the directory to a level higher than the current one).\n\nsetwd(\"./lab01\")\n\nIf your current working directory is lab01 and you want to change to geog6160, enter the following code (where the ../ changes the directory to a level below the current one).\n\nsetwd(\"../\")\n\nFinally, if your current working directory is lab01 and you want to change to lab02, which is at the same level as the current directory, enter the following code (where the ../ changes the directory to a level below the current one, and lab02 then moves to the level above that).\n\nsetwd(\"../lab02\")\n\nBefore proceeding with the rest of today’s lab, make sure to change your working directory back to lab01.\nIf this all seems a little foreign to you, don’t worry - there will be plenty of opportunities to practice this over the semester. Understanding the directory structure is very important in being able to manage your files both for this class and any analysis you do.\n\n\nUsing the console\nIn the console, the ‘&gt;’ is the prompt, and your commands will be entered here. Click on the console window, then enter the following:\n\n2+2\n\n[1] 4\n\n\nAnd press ‘Enter’, and R will tell you, not too surprisingly, that 2+2=4. The spacing is not relevant, you could equally enter 2 + 2 or 2+ 2 and get the same result. The [1] before the output is a vector index. It refers to the first value in the vector (here a vector of length 1). We’ll be using this later.\nWe can equally use standard math functions, for example, to take the natural log or square root of 2:\n\nlog(2)\n\n[1] 0.6931472\n\nsqrt(2)\n\n[1] 1.414214"
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#factors",
    "href": "GEOG_5160_6160_lab01.html#factors",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Factors",
    "text": "Factors\nThe vector of species names (penguin$species) is a set of character strings. R has another data type, a factor used to represent groups within your data. With a factor, R automatically assumes that every observation with the same name or level belongs to a single group, which can greatly facilitate comparing values between groups\nYou can convert a vector of character strings to a factor with the as.factor() function. The following code replaces the original species string with factor:\n\npenguin$species &lt;- as.factor(penguin$species)\n\nNow let’s recheck the class:\n\nclass(penguin$species)\n\n[1] \"factor\"\n\n\nIf we now check the first 10 values, you will see some additional information showing the levels of the factor, i.e. the individual groups.\n\npenguin$species[1:10]\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Adelie Chinstrap Gentoo\n\n\nR automatically sets the levels in alphabetical order, irrespective of the order in the vector. The first level is considered to be the reference level, which has some uses in regression model as we will see later. You can change the order of the levels using the factor() function. The following sets the species Gentoo as the reference:\n\nfactor(penguin$species, levels = c(\"Gentoo\", \"Chinstrap\", \"Adelie\"))\n\nWe will look further at how factors work in a later lab."
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#univariate-statistics",
    "href": "GEOG_5160_6160_lab01.html#univariate-statistics",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Univariate statistics",
    "text": "Univariate statistics\nNow create two new vectors in R containing the list of bill lengths and the list of species names. Note the use of the assignment operator &lt;-. You can also use the equal sign (=) here and elsewhere in these examples.\n\nbl &lt;- penguin$bill_length_mm\nsp &lt;- penguin$species\n\nR has a large number of inbuilt functions. This section is designed to simply introduce you to the some basic functions for describing data. We’ll start by simply calculating the mean of the bill length values\n\nmean(bl)\n\n[1] NA\n\n\nThis returns the value NA, rather than a mean length. So what went wrong? In the original set of data, there are some missing values, also denoted by NA.\n\nbl[1:15]\n\n [1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6\n\n\nR’s default for most functions is to not calculate values when there are missing observations. This is really to alert you to the fact that the data are incomplete, and the value you would obtain might be biased. You can overrule this by adding the argument na.rm=TRUE to the following functions. This removes NAs and calculates the value with whatever is leftover.\nFunctions to describe the central tendency:\n\nmean(bl, na.rm = TRUE)\n\n[1] 43.92193\n\nmedian(bl, na.rm = TRUE)\n\n[1] 44.45\n\n\nFunctions to describe the dispersion (output not shown):\n\nsd(bl, na.rm = TRUE)\nvar(bl, na.rm = TRUE)\nmin(bl, na.rm = TRUE)\nmax(bl, na.rm = TRUE)\nquantile(bl, na.rm = TRUE)\n\nNote that quantile() takes a parameter that allows you to choose the quantile to be calculated, e.g. quantile(bl, c(0.1,0.9), na.rm = TRUE), will calculate the 10th and 90th percentile. Try adapting this to calculate the 25th and 75th percentile.\nSome other useful functions:\n\nsum(bl, na.rm = TRUE)\nsummary(bl)\n\nNote that we do not need to tell R to exclude NAs for the summary() function. This provides a set of summary statistics and lets you know how many values are missing.\nSome specific functions for categorical data\n\nlevels(sp)\ntable(sp)\n\nAs R is object oriented, functions will adapt to different data types\n\nsummary(bl) ## Summary of numeric vector\nsummary(sp) ## Summary of categorical vector\nsummary(penguin) ## Summary of data frame\n\n\nThe tapply() function\nR has a set of *apply functions designed to help to do repetitive tasks. We will look at one of the simplest of these today, the table apply function. This applies a function (e.g. mean) to a vector, but calculates the function on subgroups defined by categories in a second vector. For example, to calculate the average bill length per species of penguin, we can do the following:\n\ntapply(penguin$bill_length_mm, penguin$species, mean, na.rm = TRUE)\n\n   Adelie Chinstrap    Gentoo \n 38.79139  48.83382  47.50488 \n\n\nRepeat this and calculate the standard deviation per species."
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#index-plots",
    "href": "GEOG_5160_6160_lab01.html#index-plots",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Index plots",
    "text": "Index plots\nThe simplest type of plot is an index plot, which simply plots values in the order they are recorded in the input vector. These are useful for examining the basic data structure and identifying errors and outliers. plot is a generic plotting command and will adapt to different data types. The parameter type='p' gives the plot type, here using points. Other options are 'l' for lines, 'h' for histogram lines, 's' for a stepped plot and 'b' for both line and points. See help(plot) for more options and other parameters.\n\nplot(penguin$bill_length_mm, type = 'p')\n\n\n\n\n\n\n\n\nAs we have only asked to plot one variable, this is represented on the y-axis. The x-axis gives the index of the observation, in this case from 1 to 350. Other index plots include strip plots and dot plots (also known as Cleveland plots). Here we use a combination of species name and row number to label the plot.\n\nstripchart(penguin$bill_length_mm, method = 'stack')\n\n\n\n\n\n\n\ndotchart(penguin$bill_length_mm[1:20], \n         labels = paste(penguin$species[1:20], 1:20, sep = \"_\"))\n\n\n\n\n\n\n\n\nThe final example of an index plot shown in class is the quantile-quantile or q-q plot. This compares the quantiles of the set of data values to equivalent quantiles from a standard normal distribution. The first function used here qqnorm() plots this comparison, and if the data set is normally distributed, there should be a linear correspondence between the observed and theoretical quantiles, i.e. they should form a straight line on the scatterplot. The second function, qqline, adds a line representing the match between two normal distributions. If the points from the first function fall mainly on this line, we can infer that our data set is close to being normally distributed.\n\nqqnorm(penguin$bill_length_mm)\nqqline(penguin$bill_length_mm)"
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#summary-plots",
    "href": "GEOG_5160_6160_lab01.html#summary-plots",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Summary plots",
    "text": "Summary plots\nSummary plots attempt to describe the distribution of the data, giving some ideas about which values are most common and which are most rare. Histograms are commonly used for this method, values are ‘binned’ into a set of classes, and the histogram represents the frequency of occurrences in that bin. Bins are defined with the breaks parameter, which may be set to a constant number in which case the data range is split into that many bins, or as a sequence of numbers defining the intervals between bins. In this latter case, we can make use of the seq() function from earlier.\n\nhist(penguin$bill_length_mm, breaks = 20)\n\n\n\n\n\n\n\nhist(penguin$bill_length_mm, breaks = seq(30, 60, 2.5))\n\n\n\n\n\n\n\n\nAn alternative to histograms are boxplots, which show information about the data quartiles. Here the box represents the interquartile data (25-75% of the data), the thick bar is the median, and the ‘whiskers’ show the data range.\n\nboxplot(penguin$bill_length_mm)\n\n\n\n\n\n\n\n\nThis is not hugely informative, but we will expand this plot below:"
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#bivariate-plots",
    "href": "GEOG_5160_6160_lab01.html#bivariate-plots",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Bivariate plots",
    "text": "Bivariate plots\nBivariate plots are designed to show the relationship between two variables, and how this may vary. The simplest form is the scatter plot. We use the plot() function again, but now we give it two variables (x and y).\n\nplot(penguin$bill_length_mm, penguin$bill_depth_mm)\n\n\n\n\n\n\n\n\nAs we know that these values come from three difference species, we can use this knowledge to add extra information to the plot, by using the col parameter. We first convert the Species vector to a factor class. R will then use the levels of the factor to assign colors to the points. We can also change the symbol type using the pch parameter.\n\npenguin$species &lt;- as.factor(penguin$species)\n\nplot(penguin$bill_length_mm, penguin$bill_depth_mm,\n     col = penguin$species, pch = 16)\n\n\n\n\n\n\n\n\nLet’s clean up this plot a little by specifying the axis labels and a title:\n\nplot(penguin$bill_length_mm, penguin$bill_depth_mm,\n     col = penguin$species, \n     pch = 16, \n     xlab = \"Bill length (mm)\", \n     ylab = \"Bill depth (mm)\",\n     main = \"Penguin size measurements (Palmer Archipelago)\")\n\nWe can also add a legend to our plot to explain the different colors and symbols. Unfortunately, R makes you do all the work for this, using the legend() function. Here, we add a legend to the top left of the plot, giving the labels for each color and the color used:\n\nlegend(\"bottomleft\",\n       legend = c(\"Adelie\",\"Chinstrap\",\"Gentoo\"),\n       col = c(1,2,3), \n       pch = 16)\n\n\n\n\n\n\n\n\n\n\nNote that we can also use the levels() function introduced above to help - this will give us the list of labels to be used in the title:\nAn alternative way to look at the association between factors and a variable is, again, to use boxplots. Note that this code uses a tilde (\\(\\sim\\)) between the variable and the set of factors. The tilde is often used to define dependency between two variables, and we will return to this again during the modeling part of this class.\n\nboxplot(penguin$bill_length_mm ~ penguin$species, \n        ylab = 'Bill length (mm)')\n\n\n\n\n\n\n\n\nAs the boxplot does not automatically label the y-axis, we add this with the ylab parameter. See help(plot) and help(par) for a complete list of the plotting parameters."
  },
  {
    "objectID": "GEOG_5160_6160_lab01.html#graphic-output",
    "href": "GEOG_5160_6160_lab01.html#graphic-output",
    "title": "GEOG 5160 6160 Lab 01",
    "section": "Graphic output",
    "text": "Graphic output\nBy default, R plots graphics to the screen, but has the ability to save figures in most of the standard graphic formats. In order to do this, you first need to open a file (a graphics device), then run the plotting functions, then close the device. Remember that you need to plot all the layers of a figure before closing the file. The following example plots the penguin bill length data to a pdf file. Alternatives include: png, jpeg, svg, etc.; type help(Devices) for more details.\n\npdf(\"penguin_bill_length.pdf\")\nplot(penguin$bill_length_mm, penguin$bill_depth_mm,\n     col = penguin$species, \n     pch = 16, \n     xlab = \"Bill length (mm)\", \n     ylab = \"Bill depth (mm)\",\n     main = \"Penguin size measurements (Palmer Archipelago\")\nlegend(\"bottomleft\",\n       legend = c(\"Adelie\",\"Chinstrap\",\"Gentoo\"),\n       col = c(1,2,3), \n       pch = 16)\ndev.off()\n\nAlternatively, you can copy-paste directly into Word by going to [Export] -&gt; [Copy to clipboard…] in R Studio’s plotting window."
  }
]